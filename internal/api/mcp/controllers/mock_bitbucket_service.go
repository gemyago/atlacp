// Code generated by mockery. DO NOT EDIT.

//go:build !release

package controllers

import (
	context "context"

	app "github.com/gemyago/atlacp/internal/app"
	bitbucket "github.com/gemyago/atlacp/internal/services/bitbucket"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockbitbucketService is an autogenerated mock type for the bitbucketService type
type MockbitbucketService struct {
	mock.Mock
}

type MockbitbucketService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbitbucketService) EXPECT() *MockbitbucketService_Expecter {
	return &MockbitbucketService_Expecter{mock: &_m.Mock}
}

// AddPRComment provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) AddPRComment(ctx context.Context, params app.BitbucketAddPRCommentParams) (int64, string, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for AddPRComment")
	}

	var r0 int64
	var r1 string
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketAddPRCommentParams) (int64, string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketAddPRCommentParams) int64); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketAddPRCommentParams) string); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(string)
	}

	if rf, ok := ret.Get(2).(func(context.Context, app.BitbucketAddPRCommentParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockbitbucketService_AddPRComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddPRComment'
type MockbitbucketService_AddPRComment_Call struct {
	*mock.Call
}

// AddPRComment is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketAddPRCommentParams
func (_e *MockbitbucketService_Expecter) AddPRComment(ctx interface{}, params interface{}) *MockbitbucketService_AddPRComment_Call {
	return &MockbitbucketService_AddPRComment_Call{Call: _e.mock.On("AddPRComment", ctx, params)}
}

func (_c *MockbitbucketService_AddPRComment_Call) Run(run func(ctx context.Context, params app.BitbucketAddPRCommentParams)) *MockbitbucketService_AddPRComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketAddPRCommentParams))
	})
	return _c
}

func (_c *MockbitbucketService_AddPRComment_Call) Return(_a0 int64, _a1 string, _a2 error) *MockbitbucketService_AddPRComment_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockbitbucketService_AddPRComment_Call) RunAndReturn(run func(context.Context, app.BitbucketAddPRCommentParams) (int64, string, error)) *MockbitbucketService_AddPRComment_Call {
	_c.Call.Return(run)
	return _c
}

// ApprovePR provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) ApprovePR(ctx context.Context, params app.BitbucketApprovePRParams) (*bitbucket.Participant, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ApprovePR")
	}

	var r0 *bitbucket.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketApprovePRParams) (*bitbucket.Participant, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketApprovePRParams) *bitbucket.Participant); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.Participant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketApprovePRParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_ApprovePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApprovePR'
type MockbitbucketService_ApprovePR_Call struct {
	*mock.Call
}

// ApprovePR is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketApprovePRParams
func (_e *MockbitbucketService_Expecter) ApprovePR(ctx interface{}, params interface{}) *MockbitbucketService_ApprovePR_Call {
	return &MockbitbucketService_ApprovePR_Call{Call: _e.mock.On("ApprovePR", ctx, params)}
}

func (_c *MockbitbucketService_ApprovePR_Call) Run(run func(ctx context.Context, params app.BitbucketApprovePRParams)) *MockbitbucketService_ApprovePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketApprovePRParams))
	})
	return _c
}

func (_c *MockbitbucketService_ApprovePR_Call) Return(_a0 *bitbucket.Participant, _a1 error) *MockbitbucketService_ApprovePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_ApprovePR_Call) RunAndReturn(run func(context.Context, app.BitbucketApprovePRParams) (*bitbucket.Participant, error)) *MockbitbucketService_ApprovePR_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePR provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) CreatePR(ctx context.Context, params app.BitbucketCreatePRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreatePR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketCreatePRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketCreatePRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketCreatePRParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_CreatePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePR'
type MockbitbucketService_CreatePR_Call struct {
	*mock.Call
}

// CreatePR is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketCreatePRParams
func (_e *MockbitbucketService_Expecter) CreatePR(ctx interface{}, params interface{}) *MockbitbucketService_CreatePR_Call {
	return &MockbitbucketService_CreatePR_Call{Call: _e.mock.On("CreatePR", ctx, params)}
}

func (_c *MockbitbucketService_CreatePR_Call) Run(run func(ctx context.Context, params app.BitbucketCreatePRParams)) *MockbitbucketService_CreatePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketCreatePRParams))
	})
	return _c
}

func (_c *MockbitbucketService_CreatePR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockbitbucketService_CreatePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_CreatePR_Call) RunAndReturn(run func(context.Context, app.BitbucketCreatePRParams) (*bitbucket.PullRequest, error)) *MockbitbucketService_CreatePR_Call {
	_c.Call.Return(run)
	return _c
}

// CreateTask provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) CreateTask(ctx context.Context, params app.BitbucketCreateTaskParams) (*bitbucket.PullRequestCommentTask, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *bitbucket.PullRequestCommentTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketCreateTaskParams) (*bitbucket.PullRequestCommentTask, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketCreateTaskParams) *bitbucket.PullRequestCommentTask); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequestCommentTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketCreateTaskParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_CreateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateTask'
type MockbitbucketService_CreateTask_Call struct {
	*mock.Call
}

// CreateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketCreateTaskParams
func (_e *MockbitbucketService_Expecter) CreateTask(ctx interface{}, params interface{}) *MockbitbucketService_CreateTask_Call {
	return &MockbitbucketService_CreateTask_Call{Call: _e.mock.On("CreateTask", ctx, params)}
}

func (_c *MockbitbucketService_CreateTask_Call) Run(run func(ctx context.Context, params app.BitbucketCreateTaskParams)) *MockbitbucketService_CreateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketCreateTaskParams))
	})
	return _c
}

func (_c *MockbitbucketService_CreateTask_Call) Return(_a0 *bitbucket.PullRequestCommentTask, _a1 error) *MockbitbucketService_CreateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_CreateTask_Call) RunAndReturn(run func(context.Context, app.BitbucketCreateTaskParams) (*bitbucket.PullRequestCommentTask, error)) *MockbitbucketService_CreateTask_Call {
	_c.Call.Return(run)
	return _c
}

// GetFileContent provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) GetFileContent(ctx context.Context, params app.BitbucketGetFileContentParams) (*bitbucket.FileContentResult, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetFileContent")
	}

	var r0 *bitbucket.FileContentResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketGetFileContentParams) (*bitbucket.FileContentResult, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketGetFileContentParams) *bitbucket.FileContentResult); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.FileContentResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketGetFileContentParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_GetFileContent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFileContent'
type MockbitbucketService_GetFileContent_Call struct {
	*mock.Call
}

// GetFileContent is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketGetFileContentParams
func (_e *MockbitbucketService_Expecter) GetFileContent(ctx interface{}, params interface{}) *MockbitbucketService_GetFileContent_Call {
	return &MockbitbucketService_GetFileContent_Call{Call: _e.mock.On("GetFileContent", ctx, params)}
}

func (_c *MockbitbucketService_GetFileContent_Call) Run(run func(ctx context.Context, params app.BitbucketGetFileContentParams)) *MockbitbucketService_GetFileContent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketGetFileContentParams))
	})
	return _c
}

func (_c *MockbitbucketService_GetFileContent_Call) Return(_a0 *bitbucket.FileContentResult, _a1 error) *MockbitbucketService_GetFileContent_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_GetFileContent_Call) RunAndReturn(run func(context.Context, app.BitbucketGetFileContentParams) (*bitbucket.FileContentResult, error)) *MockbitbucketService_GetFileContent_Call {
	_c.Call.Return(run)
	return _c
}

// GetPRDiff provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) GetPRDiff(ctx context.Context, params app.BitbucketGetPRDiffParams) (string, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPRDiff")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketGetPRDiffParams) (string, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketGetPRDiffParams) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketGetPRDiffParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_GetPRDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPRDiff'
type MockbitbucketService_GetPRDiff_Call struct {
	*mock.Call
}

// GetPRDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketGetPRDiffParams
func (_e *MockbitbucketService_Expecter) GetPRDiff(ctx interface{}, params interface{}) *MockbitbucketService_GetPRDiff_Call {
	return &MockbitbucketService_GetPRDiff_Call{Call: _e.mock.On("GetPRDiff", ctx, params)}
}

func (_c *MockbitbucketService_GetPRDiff_Call) Run(run func(ctx context.Context, params app.BitbucketGetPRDiffParams)) *MockbitbucketService_GetPRDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketGetPRDiffParams))
	})
	return _c
}

func (_c *MockbitbucketService_GetPRDiff_Call) Return(_a0 string, _a1 error) *MockbitbucketService_GetPRDiff_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_GetPRDiff_Call) RunAndReturn(run func(context.Context, app.BitbucketGetPRDiffParams) (string, error)) *MockbitbucketService_GetPRDiff_Call {
	_c.Call.Return(run)
	return _c
}

// GetPRDiffStat provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) GetPRDiffStat(ctx context.Context, params app.BitbucketGetPRDiffStatParams) (*app.PaginatedDiffStat, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPRDiffStat")
	}

	var r0 *app.PaginatedDiffStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketGetPRDiffStatParams) (*app.PaginatedDiffStat, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketGetPRDiffStatParams) *app.PaginatedDiffStat); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*app.PaginatedDiffStat)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketGetPRDiffStatParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_GetPRDiffStat_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPRDiffStat'
type MockbitbucketService_GetPRDiffStat_Call struct {
	*mock.Call
}

// GetPRDiffStat is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketGetPRDiffStatParams
func (_e *MockbitbucketService_Expecter) GetPRDiffStat(ctx interface{}, params interface{}) *MockbitbucketService_GetPRDiffStat_Call {
	return &MockbitbucketService_GetPRDiffStat_Call{Call: _e.mock.On("GetPRDiffStat", ctx, params)}
}

func (_c *MockbitbucketService_GetPRDiffStat_Call) Run(run func(ctx context.Context, params app.BitbucketGetPRDiffStatParams)) *MockbitbucketService_GetPRDiffStat_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketGetPRDiffStatParams))
	})
	return _c
}

func (_c *MockbitbucketService_GetPRDiffStat_Call) Return(_a0 *app.PaginatedDiffStat, _a1 error) *MockbitbucketService_GetPRDiffStat_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_GetPRDiffStat_Call) RunAndReturn(run func(context.Context, app.BitbucketGetPRDiffStatParams) (*app.PaginatedDiffStat, error)) *MockbitbucketService_GetPRDiffStat_Call {
	_c.Call.Return(run)
	return _c
}

// ListPRComments provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) ListPRComments(ctx context.Context, params app.BitbucketListPRCommentsParams) (*bitbucket.ListPRCommentsResponse, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListPRComments")
	}

	var r0 *bitbucket.ListPRCommentsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketListPRCommentsParams) (*bitbucket.ListPRCommentsResponse, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketListPRCommentsParams) *bitbucket.ListPRCommentsResponse); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.ListPRCommentsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketListPRCommentsParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_ListPRComments_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListPRComments'
type MockbitbucketService_ListPRComments_Call struct {
	*mock.Call
}

// ListPRComments is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketListPRCommentsParams
func (_e *MockbitbucketService_Expecter) ListPRComments(ctx interface{}, params interface{}) *MockbitbucketService_ListPRComments_Call {
	return &MockbitbucketService_ListPRComments_Call{Call: _e.mock.On("ListPRComments", ctx, params)}
}

func (_c *MockbitbucketService_ListPRComments_Call) Run(run func(ctx context.Context, params app.BitbucketListPRCommentsParams)) *MockbitbucketService_ListPRComments_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketListPRCommentsParams))
	})
	return _c
}

func (_c *MockbitbucketService_ListPRComments_Call) Return(_a0 *bitbucket.ListPRCommentsResponse, _a1 error) *MockbitbucketService_ListPRComments_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_ListPRComments_Call) RunAndReturn(run func(context.Context, app.BitbucketListPRCommentsParams) (*bitbucket.ListPRCommentsResponse, error)) *MockbitbucketService_ListPRComments_Call {
	_c.Call.Return(run)
	return _c
}

// ListTasks provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) ListTasks(ctx context.Context, params app.BitbucketListTasksParams) (*bitbucket.PaginatedTasks, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ListTasks")
	}

	var r0 *bitbucket.PaginatedTasks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketListTasksParams) (*bitbucket.PaginatedTasks, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketListTasksParams) *bitbucket.PaginatedTasks); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PaginatedTasks)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketListTasksParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_ListTasks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListTasks'
type MockbitbucketService_ListTasks_Call struct {
	*mock.Call
}

// ListTasks is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketListTasksParams
func (_e *MockbitbucketService_Expecter) ListTasks(ctx interface{}, params interface{}) *MockbitbucketService_ListTasks_Call {
	return &MockbitbucketService_ListTasks_Call{Call: _e.mock.On("ListTasks", ctx, params)}
}

func (_c *MockbitbucketService_ListTasks_Call) Run(run func(ctx context.Context, params app.BitbucketListTasksParams)) *MockbitbucketService_ListTasks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketListTasksParams))
	})
	return _c
}

func (_c *MockbitbucketService_ListTasks_Call) Return(_a0 *bitbucket.PaginatedTasks, _a1 error) *MockbitbucketService_ListTasks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_ListTasks_Call) RunAndReturn(run func(context.Context, app.BitbucketListTasksParams) (*bitbucket.PaginatedTasks, error)) *MockbitbucketService_ListTasks_Call {
	_c.Call.Return(run)
	return _c
}

// MergePR provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) MergePR(ctx context.Context, params app.BitbucketMergePRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for MergePR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketMergePRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketMergePRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketMergePRParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_MergePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergePR'
type MockbitbucketService_MergePR_Call struct {
	*mock.Call
}

// MergePR is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketMergePRParams
func (_e *MockbitbucketService_Expecter) MergePR(ctx interface{}, params interface{}) *MockbitbucketService_MergePR_Call {
	return &MockbitbucketService_MergePR_Call{Call: _e.mock.On("MergePR", ctx, params)}
}

func (_c *MockbitbucketService_MergePR_Call) Run(run func(ctx context.Context, params app.BitbucketMergePRParams)) *MockbitbucketService_MergePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketMergePRParams))
	})
	return _c
}

func (_c *MockbitbucketService_MergePR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockbitbucketService_MergePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_MergePR_Call) RunAndReturn(run func(context.Context, app.BitbucketMergePRParams) (*bitbucket.PullRequest, error)) *MockbitbucketService_MergePR_Call {
	_c.Call.Return(run)
	return _c
}

// ReadPR provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) ReadPR(ctx context.Context, params app.BitbucketReadPRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for ReadPR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketReadPRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketReadPRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketReadPRParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_ReadPR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReadPR'
type MockbitbucketService_ReadPR_Call struct {
	*mock.Call
}

// ReadPR is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketReadPRParams
func (_e *MockbitbucketService_Expecter) ReadPR(ctx interface{}, params interface{}) *MockbitbucketService_ReadPR_Call {
	return &MockbitbucketService_ReadPR_Call{Call: _e.mock.On("ReadPR", ctx, params)}
}

func (_c *MockbitbucketService_ReadPR_Call) Run(run func(ctx context.Context, params app.BitbucketReadPRParams)) *MockbitbucketService_ReadPR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketReadPRParams))
	})
	return _c
}

func (_c *MockbitbucketService_ReadPR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockbitbucketService_ReadPR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_ReadPR_Call) RunAndReturn(run func(context.Context, app.BitbucketReadPRParams) (*bitbucket.PullRequest, error)) *MockbitbucketService_ReadPR_Call {
	_c.Call.Return(run)
	return _c
}

// RequestPRChanges provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) RequestPRChanges(ctx context.Context, params app.BitbucketRequestPRChangesParams) (string, time.Time, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for RequestPRChanges")
	}

	var r0 string
	var r1 time.Time
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketRequestPRChangesParams) (string, time.Time, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketRequestPRChangesParams) string); ok {
		r0 = rf(ctx, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketRequestPRChangesParams) time.Time); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	if rf, ok := ret.Get(2).(func(context.Context, app.BitbucketRequestPRChangesParams) error); ok {
		r2 = rf(ctx, params)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockbitbucketService_RequestPRChanges_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RequestPRChanges'
type MockbitbucketService_RequestPRChanges_Call struct {
	*mock.Call
}

// RequestPRChanges is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketRequestPRChangesParams
func (_e *MockbitbucketService_Expecter) RequestPRChanges(ctx interface{}, params interface{}) *MockbitbucketService_RequestPRChanges_Call {
	return &MockbitbucketService_RequestPRChanges_Call{Call: _e.mock.On("RequestPRChanges", ctx, params)}
}

func (_c *MockbitbucketService_RequestPRChanges_Call) Run(run func(ctx context.Context, params app.BitbucketRequestPRChangesParams)) *MockbitbucketService_RequestPRChanges_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketRequestPRChangesParams))
	})
	return _c
}

func (_c *MockbitbucketService_RequestPRChanges_Call) Return(_a0 string, _a1 time.Time, _a2 error) *MockbitbucketService_RequestPRChanges_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockbitbucketService_RequestPRChanges_Call) RunAndReturn(run func(context.Context, app.BitbucketRequestPRChangesParams) (string, time.Time, error)) *MockbitbucketService_RequestPRChanges_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePR provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) UpdatePR(ctx context.Context, params app.BitbucketUpdatePRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketUpdatePRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketUpdatePRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketUpdatePRParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_UpdatePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePR'
type MockbitbucketService_UpdatePR_Call struct {
	*mock.Call
}

// UpdatePR is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketUpdatePRParams
func (_e *MockbitbucketService_Expecter) UpdatePR(ctx interface{}, params interface{}) *MockbitbucketService_UpdatePR_Call {
	return &MockbitbucketService_UpdatePR_Call{Call: _e.mock.On("UpdatePR", ctx, params)}
}

func (_c *MockbitbucketService_UpdatePR_Call) Run(run func(ctx context.Context, params app.BitbucketUpdatePRParams)) *MockbitbucketService_UpdatePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketUpdatePRParams))
	})
	return _c
}

func (_c *MockbitbucketService_UpdatePR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockbitbucketService_UpdatePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_UpdatePR_Call) RunAndReturn(run func(context.Context, app.BitbucketUpdatePRParams) (*bitbucket.PullRequest, error)) *MockbitbucketService_UpdatePR_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateTask provides a mock function with given fields: ctx, params
func (_m *MockbitbucketService) UpdateTask(ctx context.Context, params app.BitbucketUpdateTaskParams) (*bitbucket.PullRequestCommentTask, error) {
	ret := _m.Called(ctx, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 *bitbucket.PullRequestCommentTask
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketUpdateTaskParams) (*bitbucket.PullRequestCommentTask, error)); ok {
		return rf(ctx, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, app.BitbucketUpdateTaskParams) *bitbucket.PullRequestCommentTask); ok {
		r0 = rf(ctx, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequestCommentTask)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, app.BitbucketUpdateTaskParams) error); ok {
		r1 = rf(ctx, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketService_UpdateTask_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateTask'
type MockbitbucketService_UpdateTask_Call struct {
	*mock.Call
}

// UpdateTask is a helper method to define mock.On call
//   - ctx context.Context
//   - params app.BitbucketUpdateTaskParams
func (_e *MockbitbucketService_Expecter) UpdateTask(ctx interface{}, params interface{}) *MockbitbucketService_UpdateTask_Call {
	return &MockbitbucketService_UpdateTask_Call{Call: _e.mock.On("UpdateTask", ctx, params)}
}

func (_c *MockbitbucketService_UpdateTask_Call) Run(run func(ctx context.Context, params app.BitbucketUpdateTaskParams)) *MockbitbucketService_UpdateTask_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(app.BitbucketUpdateTaskParams))
	})
	return _c
}

func (_c *MockbitbucketService_UpdateTask_Call) Return(_a0 *bitbucket.PullRequestCommentTask, _a1 error) *MockbitbucketService_UpdateTask_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketService_UpdateTask_Call) RunAndReturn(run func(context.Context, app.BitbucketUpdateTaskParams) (*bitbucket.PullRequestCommentTask, error)) *MockbitbucketService_UpdateTask_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbitbucketService creates a new instance of MockbitbucketService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbitbucketService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbitbucketService {
	mock := &MockbitbucketService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
