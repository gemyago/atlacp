// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockbitbucketAuthFactory is an autogenerated mock type for the bitbucketAuthFactory type
type MockbitbucketAuthFactory struct {
	mock.Mock
}

type MockbitbucketAuthFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *MockbitbucketAuthFactory) EXPECT() *MockbitbucketAuthFactory_Expecter {
	return &MockbitbucketAuthFactory_Expecter{mock: &_m.Mock}
}

// getTokenProvider provides a mock function with given fields: ctx, accountName
func (_m *MockbitbucketAuthFactory) getTokenProvider(ctx context.Context, accountName string) (TokenProvider, error) {
	ret := _m.Called(ctx, accountName)

	if len(ret) == 0 {
		panic("no return value specified for getTokenProvider")
	}

	var r0 TokenProvider
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (TokenProvider, error)); ok {
		return rf(ctx, accountName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) TokenProvider); ok {
		r0 = rf(ctx, accountName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TokenProvider)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accountName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockbitbucketAuthFactory_getTokenProvider_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'getTokenProvider'
type MockbitbucketAuthFactory_getTokenProvider_Call struct {
	*mock.Call
}

// getTokenProvider is a helper method to define mock.On call
//   - ctx context.Context
//   - accountName string
func (_e *MockbitbucketAuthFactory_Expecter) getTokenProvider(ctx interface{}, accountName interface{}) *MockbitbucketAuthFactory_getTokenProvider_Call {
	return &MockbitbucketAuthFactory_getTokenProvider_Call{Call: _e.mock.On("getTokenProvider", ctx, accountName)}
}

func (_c *MockbitbucketAuthFactory_getTokenProvider_Call) Run(run func(ctx context.Context, accountName string)) *MockbitbucketAuthFactory_getTokenProvider_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockbitbucketAuthFactory_getTokenProvider_Call) Return(_a0 TokenProvider, _a1 error) *MockbitbucketAuthFactory_getTokenProvider_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockbitbucketAuthFactory_getTokenProvider_Call) RunAndReturn(run func(context.Context, string) (TokenProvider, error)) *MockbitbucketAuthFactory_getTokenProvider_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockbitbucketAuthFactory creates a new instance of MockbitbucketAuthFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockbitbucketAuthFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockbitbucketAuthFactory {
	mock := &MockbitbucketAuthFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
