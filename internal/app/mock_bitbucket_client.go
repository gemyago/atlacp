// Code generated by mockery. DO NOT EDIT.

//go:build !release

package app

import (
	context "context"

	bitbucket "github.com/gemyago/atlacp/internal/services/bitbucket"

	mock "github.com/stretchr/testify/mock"
)

// MockBitbucketClient is an autogenerated mock type for the BitbucketClient type
type MockBitbucketClient struct {
	mock.Mock
}

type MockBitbucketClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBitbucketClient) EXPECT() *MockBitbucketClient_Expecter {
	return &MockBitbucketClient_Expecter{mock: &_m.Mock}
}

// ApprovePR provides a mock function with given fields: ctx, tokenProvider, params
func (_m *MockBitbucketClient) ApprovePR(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.ApprovePRParams) (*bitbucket.Participant, error) {
	ret := _m.Called(ctx, tokenProvider, params)

	if len(ret) == 0 {
		panic("no return value specified for ApprovePR")
	}

	var r0 *bitbucket.Participant
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.ApprovePRParams) (*bitbucket.Participant, error)); ok {
		return rf(ctx, tokenProvider, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.ApprovePRParams) *bitbucket.Participant); ok {
		r0 = rf(ctx, tokenProvider, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.Participant)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bitbucket.TokenProvider, bitbucket.ApprovePRParams) error); ok {
		r1 = rf(ctx, tokenProvider, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketClient_ApprovePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ApprovePR'
type MockBitbucketClient_ApprovePR_Call struct {
	*mock.Call
}

// ApprovePR is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenProvider bitbucket.TokenProvider
//   - params bitbucket.ApprovePRParams
func (_e *MockBitbucketClient_Expecter) ApprovePR(ctx interface{}, tokenProvider interface{}, params interface{}) *MockBitbucketClient_ApprovePR_Call {
	return &MockBitbucketClient_ApprovePR_Call{Call: _e.mock.On("ApprovePR", ctx, tokenProvider, params)}
}

func (_c *MockBitbucketClient_ApprovePR_Call) Run(run func(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.ApprovePRParams)) *MockBitbucketClient_ApprovePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bitbucket.TokenProvider), args[2].(bitbucket.ApprovePRParams))
	})
	return _c
}

func (_c *MockBitbucketClient_ApprovePR_Call) Return(_a0 *bitbucket.Participant, _a1 error) *MockBitbucketClient_ApprovePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketClient_ApprovePR_Call) RunAndReturn(run func(context.Context, bitbucket.TokenProvider, bitbucket.ApprovePRParams) (*bitbucket.Participant, error)) *MockBitbucketClient_ApprovePR_Call {
	_c.Call.Return(run)
	return _c
}

// CreatePR provides a mock function with given fields: ctx, tokenProvider, params
func (_m *MockBitbucketClient) CreatePR(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.CreatePRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, tokenProvider, params)

	if len(ret) == 0 {
		panic("no return value specified for CreatePR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.CreatePRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, tokenProvider, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.CreatePRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, tokenProvider, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bitbucket.TokenProvider, bitbucket.CreatePRParams) error); ok {
		r1 = rf(ctx, tokenProvider, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketClient_CreatePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreatePR'
type MockBitbucketClient_CreatePR_Call struct {
	*mock.Call
}

// CreatePR is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenProvider bitbucket.TokenProvider
//   - params bitbucket.CreatePRParams
func (_e *MockBitbucketClient_Expecter) CreatePR(ctx interface{}, tokenProvider interface{}, params interface{}) *MockBitbucketClient_CreatePR_Call {
	return &MockBitbucketClient_CreatePR_Call{Call: _e.mock.On("CreatePR", ctx, tokenProvider, params)}
}

func (_c *MockBitbucketClient_CreatePR_Call) Run(run func(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.CreatePRParams)) *MockBitbucketClient_CreatePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bitbucket.TokenProvider), args[2].(bitbucket.CreatePRParams))
	})
	return _c
}

func (_c *MockBitbucketClient_CreatePR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockBitbucketClient_CreatePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketClient_CreatePR_Call) RunAndReturn(run func(context.Context, bitbucket.TokenProvider, bitbucket.CreatePRParams) (*bitbucket.PullRequest, error)) *MockBitbucketClient_CreatePR_Call {
	_c.Call.Return(run)
	return _c
}

// GetPR provides a mock function with given fields: ctx, tokenProvider, params
func (_m *MockBitbucketClient) GetPR(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.GetPRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, tokenProvider, params)

	if len(ret) == 0 {
		panic("no return value specified for GetPR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.GetPRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, tokenProvider, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.GetPRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, tokenProvider, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bitbucket.TokenProvider, bitbucket.GetPRParams) error); ok {
		r1 = rf(ctx, tokenProvider, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketClient_GetPR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetPR'
type MockBitbucketClient_GetPR_Call struct {
	*mock.Call
}

// GetPR is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenProvider bitbucket.TokenProvider
//   - params bitbucket.GetPRParams
func (_e *MockBitbucketClient_Expecter) GetPR(ctx interface{}, tokenProvider interface{}, params interface{}) *MockBitbucketClient_GetPR_Call {
	return &MockBitbucketClient_GetPR_Call{Call: _e.mock.On("GetPR", ctx, tokenProvider, params)}
}

func (_c *MockBitbucketClient_GetPR_Call) Run(run func(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.GetPRParams)) *MockBitbucketClient_GetPR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bitbucket.TokenProvider), args[2].(bitbucket.GetPRParams))
	})
	return _c
}

func (_c *MockBitbucketClient_GetPR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockBitbucketClient_GetPR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketClient_GetPR_Call) RunAndReturn(run func(context.Context, bitbucket.TokenProvider, bitbucket.GetPRParams) (*bitbucket.PullRequest, error)) *MockBitbucketClient_GetPR_Call {
	_c.Call.Return(run)
	return _c
}

// MergePR provides a mock function with given fields: ctx, tokenProvider, params
func (_m *MockBitbucketClient) MergePR(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.MergePRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, tokenProvider, params)

	if len(ret) == 0 {
		panic("no return value specified for MergePR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.MergePRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, tokenProvider, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.MergePRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, tokenProvider, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bitbucket.TokenProvider, bitbucket.MergePRParams) error); ok {
		r1 = rf(ctx, tokenProvider, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketClient_MergePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MergePR'
type MockBitbucketClient_MergePR_Call struct {
	*mock.Call
}

// MergePR is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenProvider bitbucket.TokenProvider
//   - params bitbucket.MergePRParams
func (_e *MockBitbucketClient_Expecter) MergePR(ctx interface{}, tokenProvider interface{}, params interface{}) *MockBitbucketClient_MergePR_Call {
	return &MockBitbucketClient_MergePR_Call{Call: _e.mock.On("MergePR", ctx, tokenProvider, params)}
}

func (_c *MockBitbucketClient_MergePR_Call) Run(run func(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.MergePRParams)) *MockBitbucketClient_MergePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bitbucket.TokenProvider), args[2].(bitbucket.MergePRParams))
	})
	return _c
}

func (_c *MockBitbucketClient_MergePR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockBitbucketClient_MergePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketClient_MergePR_Call) RunAndReturn(run func(context.Context, bitbucket.TokenProvider, bitbucket.MergePRParams) (*bitbucket.PullRequest, error)) *MockBitbucketClient_MergePR_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePR provides a mock function with given fields: ctx, tokenProvider, params
func (_m *MockBitbucketClient) UpdatePR(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.UpdatePRParams) (*bitbucket.PullRequest, error) {
	ret := _m.Called(ctx, tokenProvider, params)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePR")
	}

	var r0 *bitbucket.PullRequest
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.UpdatePRParams) (*bitbucket.PullRequest, error)); ok {
		return rf(ctx, tokenProvider, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, bitbucket.TokenProvider, bitbucket.UpdatePRParams) *bitbucket.PullRequest); ok {
		r0 = rf(ctx, tokenProvider, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bitbucket.PullRequest)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, bitbucket.TokenProvider, bitbucket.UpdatePRParams) error); ok {
		r1 = rf(ctx, tokenProvider, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockBitbucketClient_UpdatePR_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePR'
type MockBitbucketClient_UpdatePR_Call struct {
	*mock.Call
}

// UpdatePR is a helper method to define mock.On call
//   - ctx context.Context
//   - tokenProvider bitbucket.TokenProvider
//   - params bitbucket.UpdatePRParams
func (_e *MockBitbucketClient_Expecter) UpdatePR(ctx interface{}, tokenProvider interface{}, params interface{}) *MockBitbucketClient_UpdatePR_Call {
	return &MockBitbucketClient_UpdatePR_Call{Call: _e.mock.On("UpdatePR", ctx, tokenProvider, params)}
}

func (_c *MockBitbucketClient_UpdatePR_Call) Run(run func(ctx context.Context, tokenProvider bitbucket.TokenProvider, params bitbucket.UpdatePRParams)) *MockBitbucketClient_UpdatePR_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bitbucket.TokenProvider), args[2].(bitbucket.UpdatePRParams))
	})
	return _c
}

func (_c *MockBitbucketClient_UpdatePR_Call) Return(_a0 *bitbucket.PullRequest, _a1 error) *MockBitbucketClient_UpdatePR_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockBitbucketClient_UpdatePR_Call) RunAndReturn(run func(context.Context, bitbucket.TokenProvider, bitbucket.UpdatePRParams) (*bitbucket.PullRequest, error)) *MockBitbucketClient_UpdatePR_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockBitbucketClient creates a new instance of MockBitbucketClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBitbucketClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBitbucketClient {
	mock := &MockBitbucketClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
